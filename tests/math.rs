// This file is auto-generated by the build script
// Please, do not modify it manually

extern crate pulldown_cmark;


    #[test]
    fn math_test_1() {
        let original = r##"The equivalence of energy and mass: $E = mc^2$.
"##;
        let expected = r##"<p>The equivalence of energy and mass: <span class="math math-inline">E = mc^2</span>.</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_2() {
        let original = r##"$x$ and $y$ are integral variables.
"##;
        let expected = r##"<p><span class="math math-inline">x</span> and <span class="math math-inline">y</span> are integral variables.</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_3() {
        let original = r##"$x = \frac{-b \pm \sqrt{b^2 - 4ac}}
          {2a}$
"##;
        let expected = r##"<p><span class="math math-inline">x = \frac{-b \pm \sqrt{b^2 - 4ac}} {2a}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_4() {
        let original = r##"$x = \frac{-b \pm \sqrt{b^2 - 4ac}}

{2a}$
"##;
        let expected = r##"<p>$x = \frac{-b \pm \sqrt{b^2 - 4ac}}</p>
<p>{2a}$</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_5() {
        let original = r##"The equivalence of energy and mass: $$E = mc^2.$$
"##;
        let expected = r##"<p>The equivalence of energy and mass: <span class="math math-display">E = mc^2.</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_6() {
        let original = r##"$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}
           {2a}$$
"##;
        let expected = r##"<p><span class="math math-display">x = \frac{-b \pm \sqrt{b^2 - 4ac}} {2a}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_7() {
        let original = r##"$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}

{2a}$$
"##;
        let expected = r##"<p><span class="math math-display">x = \frac{-b \pm \sqrt{b^2 - 4ac}}  {2a}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_8() {
        let original = r##"1. > 3-by-3 matrix $A = \begin{pmatrix}
   >                    a & b & c \\
   >                    d & e & f \\
   >                    g & h & i
   >                    \end{pmatrix}$ has a determinant
   > $$\mathrm{det} A
   >
   > = a \mathrm{det} \begin{pmatrix} e & f \\ h & i \end{pmatrix}
   > - b \mathrm{det} \begin{pmatrix} d & f \\ g & i \end{pmatrix}
   > + c \mathrm{det} \begin{pmatrix} d & e \\ g & h \end{pmatrix}
   >
   > = a(ei - fh) - b(di - fg) + c(dh - eg).$$
   >
   > In the other words, it is the sum of elements in the top row and
   > determinants for respective *minors* with alternating signs.
"##;
        let expected = r##"<ol>
<li>
<blockquote>
<p>3-by-3 matrix <span class="math math-inline">A = \begin{pmatrix} a &amp; b &amp; c \\ d &amp; e &amp; f \\ g &amp; h &amp; i \end{pmatrix}</span> has a determinant
<span class="math math-display">\mathrm{det} A  = a \mathrm{det} \begin{pmatrix} e &amp; f \\ h &amp; i \end{pmatrix} - b \mathrm{det} \begin{pmatrix} d &amp; f \\ g &amp; i \end{pmatrix} + c \mathrm{det} \begin{pmatrix} d &amp; e \\ g &amp; h \end{pmatrix}  = a(ei - fh) - b(di - fg) + c(dh - eg).</span></p>
<p>In the other words, it is the sum of elements in the top row and
determinants for respective <em>minors</em> with alternating signs.</p>
</blockquote>
</li>
</ol>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_9() {
        let original = r##"$ $ $ $ !!!
"##;
        let expected = r##"<p>$ $ $ $ !!!</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_10() {
        let original = r##"$
a
$
"##;
        let expected = r##"<p>$
a
$</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_11() {
        let original = r##"$120 + $240 = $360
"##;
        let expected = r##"<p>$120 + $240 = $360</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_12() {
        let original = r##"$$   120 + $$240
"##;
        let expected = r##"<p><span class="math math-display">120 +</span>240</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_13() {
        let original = r##"$$
x + y
$$
"##;
        let expected = r##"<p><span class="math math-display">x + y</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_14() {
        let original = r##"$a is a variable in PHP.

$b is another variable.

$c is the last variable.
"##;
        let expected = r##"<p>$a is a variable in PHP.</p>
<p>$b is another variable.</p>
<p>$c is the last variable.</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_15() {
        let original = r##"$$a is an indirect variable in PHP.

$$b is another indirect variable.

$$c is the last indirect variable.
"##;
        let expected = r##"<p><span class="math math-display">a is an indirect variable in PHP. </span>b is another indirect variable.</p>
<p>$$c is the last indirect variable.</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_16() {
        let original = r##"> $a

$b
"##;
        let expected = r##"<blockquote>
<p>$a</p>
</blockquote>
<p>$b</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_17() {
        let original = r##"> $$a

$$b

$$c
"##;
        let expected = r##"<blockquote>
<p><span class="math math-display">a </span>b</p>
</blockquote>
<p>$$c</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_18() {
        let original = r##"## Galois field with two elements $\mathbf{Z}/2\mathbf{Z}
$
"##;
        let expected = r##"<h2>Galois field with two elements $\mathbf{Z}/2\mathbf{Z}</h2>
<p>$</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_19() {
        let original = r##"$x = \text{some $y$-digit-long number}$
"##;
        let expected = r##"<p><span class="math math-inline">x = \text{some</span>y<span class="math math-inline">-digit-long number}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_20() {
        let original = r##"$x = \text{some \(y\)-digit-long number}$
"##;
        let expected = r##"<p><span class="math math-inline">x = \text{some \(y\)-digit-long number}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_21() {
        let original = r##"$x = \text{holes in the \$}$
"##;
        let expected = r##"<p><span class="math math-inline">x = \text{holes in the \$}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_22() {
        let original = r##"$$x = \text{some $y$-digit-long number}$$
"##;
        let expected = r##"<p><span class="math math-display">x = \text{some $y$-digit-long number}</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_23() {
        let original = r##"*$x$ stars* and **$y$ stripes**
"##;
        let expected = r##"<p><em><span class="math math-inline">x</span> stars</em> and <strong><span class="math math-inline">y</span> stripes</strong></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_24() {
        let original = r##"It is possible to view
an infinite sum [$$1 + 2 + 4 + 8 + \cdots$$](https://en.wikipedia.org/wiki/1_%2B_2_%2B_4_%2B_8_%2B_%E2%8B%AF)
as a special case of [$p$-adic numbers] where $p = 2$.

[$p$-adic numbers]: https://en.wikipedia.org/wiki/P-adic_number
"##;
        let expected = r##"<p>It is possible to view
an infinite sum <a href="https://en.wikipedia.org/wiki/1_%2B_2_%2B_4_%2B_8_%2B_%E2%8B%AF"><span class="math math-display">1 + 2 + 4 + 8 + \cdots</span></a>
as a special case of <a href="https://en.wikipedia.org/wiki/P-adic_number"><span class="math math-inline">p</span>-adic numbers</a> where <span class="math math-inline">p = 2</span>.</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_25() {
        let original = r##"## Galois field with two elements $\mathbf{Z}/2\mathbf{Z}$
"##;
        let expected = r##"<h2>Galois field with two elements <span class="math math-inline">\mathbf{Z}/2\mathbf{Z}</span></h2>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_26() {
        let original = r##"*$x stars*$
"##;
        let expected = r##"<p>*<span class="math math-inline">x stars*</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_27() {
        let original = r##"**$$y stripes**$$
"##;
        let expected = r##"<p>**<span class="math math-display">y stripes**</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_28() {
        let original = r##"[$p-adic numbers](https://en.wikipedia.org/wiki/P-adic_number)$
"##;
        let expected = r##"<p>[<span class="math math-inline">p-adic numbers](https://en.wikipedia.org/wiki/P-adic_number)</span></p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }

    #[test]
    fn math_test_29() {
        let original = r##"$n$인의 아해가 도로로 질주하오.

그중에 $n'$인의 아해가 무서운 아해라도 좋소.
"##;
        let expected = r##"<p><span class="math math-inline">n</span>인의 아해가 도로로 질주하오.</p>
<p>그중에 <span class="math math-inline">n'</span>인의 아해가 무서운 아해라도 좋소.</p>
"##;

        use pulldown_cmark::*;

        let mut s = String::new();

        let opts = OPTION_ENABLE_MATH;
        let p = Parser::new_ext(&original, opts);
        html::push_html(&mut s, p);

        assert_eq!(expected, s);
    }